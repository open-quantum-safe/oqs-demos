# Define build arguments for version tags, installation paths, and configurations
ARG OPENSSL_TAG=openssl-3.4.0
ARG LIBOQS_TAG=0.12.0
ARG OQSPROVIDER_TAG=0.8.0

ARG INSTALLDIR_OPENSSL=/opt/openssl
ARG INSTALLDIR_LIBOQS=/opt/liboqs

ARG SIG_ALG="dilithium3"

# Stage 1: Build OpenSSL
FROM ubuntu AS buildopenssl

LABEL version="3"

ENV DEBIAN_FRONTEND=noninteractive
ARG OPENSSL_TAG
ARG INSTALLDIR_OPENSSL
ARG INSTALLDIR_LIBOQS
ARG SIG_ALG

RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential clang libtool make gcc \
    ninja-build cmake libtool wget git ca-certificates && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

WORKDIR /optbuild
RUN git clone --depth 1 --branch ${OPENSSL_TAG} https://github.com/openssl/openssl.git

# Configure, compile, and install OpenSSL 3 with shared libraries
WORKDIR /optbuild/openssl
RUN LDFLAGS="-Wl,-rpath -Wl,${INSTALLDIR_OPENSSL}/lib64" \
    ./config shared --prefix=${INSTALLDIR_OPENSSL} && \
    make -j"$(nproc)" && make install && \
    if [ -d ${INSTALLDIR_OPENSSL}/lib64 ]; then ln -s ${INSTALLDIR_OPENSSL}/lib64 ${INSTALLDIR_OPENSSL}/lib; fi && \
    if [ -d ${INSTALLDIR_OPENSSL}/lib ]; then ln -s ${INSTALLDIR_OPENSSL}/lib ${INSTALLDIR_OPENSSL}/lib64; fi

# Stage 2: Build liboqs
FROM ubuntu AS buildliboqs

LABEL version="3"

ENV DEBIAN_FRONTEND=noninteractive
ARG LIBOQS_TAG
ARG INSTALLDIR_OPENSSL
ARG INSTALLDIR_LIBOQS
ARG SIG_ALG

RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential clang libtool make gcc \
    ninja-build cmake libtool wget git ca-certificates && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Copy the previously built OpenSSL installation from the buildopenssl stage.
COPY --from=buildopenssl ${INSTALLDIR_OPENSSL} ${INSTALLDIR_OPENSSL}

WORKDIR /optbuild
RUN git clone --depth 1 --branch ${LIBOQS_TAG} https://github.com/open-quantum-safe/liboqs

# Build and install liboqs
WORKDIR /optbuild/liboqs/build
RUN cmake -G"Ninja" .. \
    -DOPENSSL_ROOT_DIR=${INSTALLDIR_OPENSSL} \
    -DCMAKE_INSTALL_PREFIX=${INSTALLDIR_LIBOQS} && \
    ninja install

# Stage 3: Build OQS Provider for OpenSSL
FROM ubuntu AS buildoqsprovider
ARG OQSPROVIDER_TAG
ARG INSTALLDIR_OPENSSL
ARG INSTALLDIR_LIBOQS
ARG SIG_ALG

LABEL version="3"
ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential clang libtool make gcc  \
    ninja-build cmake wget git python3 python3-pip python3-venv && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

RUN python3 -m venv /opt/venv
RUN /opt/venv/bin/pip install --no-cache-dir jinja2 tabulate pyyaml

# Set the virtual environment's Python and pip as default
ENV PATH="/opt/venv/bin:$PATH"

WORKDIR /optbuild
RUN git clone --depth 1 --branch ${OQSPROVIDER_TAG} https://github.com/open-quantum-safe/oqs-provider.git

# Copy the previously built OpenSSL and liboqs installations
COPY --from=buildopenssl ${INSTALLDIR_OPENSSL} ${INSTALLDIR_OPENSSL}
COPY --from=buildliboqs ${INSTALLDIR_LIBOQS} ${INSTALLDIR_LIBOQS}
COPY --from=buildliboqs /optbuild/liboqs /optbuild/liboqs

# Modify the oqs-provider configuration to enable all cryptographic algorithms
WORKDIR /optbuild/oqs-provider
RUN sed -i "s/false/true/g" oqs-template/generate.yml && \
    LIBOQS_SRC_DIR=/optbuild/liboqs python3 oqs-template/generate.py

# Compile, install, and configure the OQS provider, enabling it by default
RUN liboqs_DIR=${INSTALLDIR_LIBOQS} cmake -DNOPUBKEY_IN_PRIVKEY=ON \
    -DOPENSSL_ROOT_DIR=${INSTALLDIR_OPENSSL} \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_PREFIX_PATH=${INSTALLDIR_OPENSSL} -S . -B _build && \
    cmake --build _build && \
    cmake --install _build && \
    cp _build/lib/oqsprovider.so ${INSTALLDIR_OPENSSL}/lib64/ossl-modules && \
    sed -i "s/default = default_sect/default = default_sect\noqsprovider = oqsprovider_sect/g" ${INSTALLDIR_OPENSSL}/ssl/openssl.cnf && \
    sed -i "s/\[default_sect\]/\[default_sect\]\nactivate = 1\n\[oqsprovider_sect\]\nactivate = 1\n/g" ${INSTALLDIR_OPENSSL}/ssl/openssl.cnf && \
    sed -i "s/providers = provider_sect/providers = provider_sect\nssl_conf = ssl_sect\n\n\[ssl_sect\]\nsystem_default = system_default_sect\n\n\[system_default_sect\]\nGroups = \$ENV\:\:DEFAULT_GROUPS\n/g" ${INSTALLDIR_OPENSSL}/ssl/openssl.cnf && \
    sed -i "s/HOME\t\t\t= ./HOME           = .\nDEFAULT_GROUPS = kyber768/g" ${INSTALLDIR_OPENSSL}/ssl/openssl.cnf

# Update the PATH to prioritize the newly installed OpenSSL binaries
WORKDIR ${INSTALLDIR_OPENSSL}/bin
ENV PATH="${INSTALLDIR_OPENSSL}/bin:${PATH}"

# Create a self-signed CA key and certificate
RUN set -x; \
    openssl req -x509 -new -newkey ${SIG_ALG} -keyout CA.key -out CA.crt -nodes -subj "/CN=oqstest CA" -days 365


# Stage 4: Create a Minimal Runtime Image
FROM ubuntu AS dev
ARG INSTALLDIR_OPENSSL
ARG SIG_ALG

# Final stage: Copy only the OpenSSL installation directory from the previous stage
COPY --from=buildoqsprovider ${INSTALLDIR_OPENSSL} ${INSTALLDIR_OPENSSL}

# Update the PATH to include the new OpenSSL binary directory
ENV PATH="${INSTALLDIR_OPENSSL}/bin:${PATH}"

# Generate certificates for the OpenSSL server
WORKDIR ${INSTALLDIR_OPENSSL}/bin

# Create a certificate signing request (CSR) for the server and sign it using the pre-generated CA
RUN set -x && mkdir -p /opt/test; \
    openssl version && openssl list -providers && \
    openssl req -new -newkey ${SIG_ALG} -keyout /opt/test/server.key -out /opt/test/server.csr -nodes -subj "/CN=localhost" && \
    openssl x509 -req -in /opt/test/server.csr -out /opt/test/server.crt -CA CA.crt -CAkey CA.key -CAcreateserial -days 365;

# Copy the startup script into the OpenSSL binary directory
COPY serverstart.sh ${INSTALLDIR_OPENSSL}/bin/serverstart.sh

WORKDIR ${INSTALLDIR_OPENSSL}

FROM dev
ARG INSTALLDIR_OPENSSL

WORKDIR /

# Create user 'oqs'
RUN groupadd oqs && \
    useradd -m -d /home/oqs -s /bin/bash -g oqs oqs && \
    mkdir -p /home/oqs && \
    chown -R oqs:oqs /opt/test && \
    chmod go+r ${INSTALLDIR_OPENSSL}/bin/CA.key

# Set 'oqs' as the default user
USER oqs

CMD ["serverstart.sh"]
STOPSIGNAL SIGTERM