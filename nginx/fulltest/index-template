<!DOCTYPE html>
<html>
<head>
<style>
table {
  font-family: arial, sans-serif;
  border-collapse: collapse;
  width: 100%;
}

td, th {
  border: 1px solid #dddddd;
  text-align: left;
  padding: 8px;
}

tr:nth-child(even) {
  background-color: #eeeeee;
}
</style>
<title>Open Quantum Safe interop test server for quantum-safe cryptography</title>
</head>
<body>
<h1 align=center>Open Quantum Safe interop test server for quantum-safe cryptography</h1>
<h2> Purpose </h2>

<p>This server is an NGINX instance enhanced with support for quantum-safe cryptography (QSC) using software packages provided by the <a href="https://www.openquantumsafe.org">Open Quantum Safe project</a> (OQS).</p>

<p>In order to provide a means for clients to test interoperability with this QSC-enhanced software and the QSC algorithms contained it features separate ports for all QSC signature/key exchange algorithm combinations supported by the current OQS distribution.</p>

<h2> Specification details </h2>

<p>This nginx server supports</p>
<ul>
<li>the TLS1.3 specification with QSC enhancement as specified in <a href="https://tools.ietf.org/html/draft-ietf-tls-hybrid-design-06">https://tools.ietf.org/html/draft-ietf-tls-hybrid-design-06</a>.</li>
<li>The signature algorithms with prefix mldsa*_ are composite signatures as specified in <a href="https://datatracker.ietf.org/doc/draft-ounsworth-pq-composite-sigs/10">https://datatracker.ietf.org/doc/draft-ounsworth-pq-composite-sigs/10</a>.</li>
<li>Code points/curve IDs of KEM algorithms are implemented with the highest numbers available for each algorithm listed <a href="https://github.com/open-quantum-safe/oqs-provider/blob/main/ALGORITHMS.md">here</a>. </li>
<li>Code points/OIDs of SIG algorithms are implemented with the highest numbers available for each algorithm as listed <a href="https://github.com/open-quantum-safe/oqs-provider/blob/main/ALGORITHMS.md">here</a>. </li>
</ul>

<p>This corresponds to the OQS release version LIBOQS_RELEASE and oqs-provider version OQSPROVIDER_RELEASE.</p>

<p>These specifications should not be taken as a standard, de facto and otherwise, and are subject to change at any time.</p>

<p>More details are available at <a href="https://github.com/open-quantum-safe/openssl/wiki/Integrating-PQC-into-TLS-1.3">Github</a>.</p>

<h4> Caveats </h4>

<ol>
<li>This test server by no means should be taken as containing production-ready software. See <a href="https://github.com/open-quantum-safe/liboqs#limitations-and-security">disclaimer</a>. Its purpose is simply to provide a best-effort facility to allow anyone to "test-drive" QSC software packages including testing protocol level interoperability.</li>

<li>When using the <a href="https://github.com/open-quantum-safe/oqs-demos/tree/main/chromium">OQS-enabled Chromium build</a> to access this web site, please heed its <a href="https://github.com/open-quantum-safe/oqs-demos/blob/main/chromium/USAGE.md">usage instructions</a>.
<li>When using the <a href="https://github.com/open-quantum-safe/oqs-demos/tree/main/epiphany">OQS-enabled GNOME Web/epiphany browser</a> to access this web site, all ports can be accessed, provided the browser is suitably started enabling the algorithms of interest. Please <a href="https://hub.docker.com/repository/docker/openquantumsafe/epiphany">read the documentation</a> how to do this.
</ol>

<h2> Certificates </h2>

<p>Each test port provides TLS server authentication using a server certificate generated using the listed QSC-signature algorithm. All server certificates are signed by a common CA certificate using conventional (RSA) cryptography. This certificate is available for download <a href="CA.crt">here</a>.</p>

<h2> Testing procedure </h2>

<p>While we cannot prescribe how this test infrastructure is used we can show how it can be utilized using the OQS software made available ready-build at <a href="https://hub.docker.com/u/openquantumsafe">Docker Hub</a> adding suggestions how other QSC-TLS implementations could check interoperability.</p>

<ol>
<li>If not already done, download the test CA certificate from <a href="CA.crt">here</a> to the directory you want to execute your tests from.</li>
<li>Select the algorithm combination to be tested from the list below. Assume this is <i>sig/kex (port)</i>.</li>
<li>Connect to the corresponding port with a QSC-enabled client side software, e.g., curl. Using a ready-made docker image this could be facilitated by running <br><pre>docker run -v `pwd`:/ca -it openquantumsafe/curl:LIBOQS_RELEASE curl --cacert /ca/CA.crt https://test.openquantumsafe.org:<i>port</i> --curves <i>kex</i></pre>Be sure to insert the <i>port</i> and <i>kex</i> values chosen above.<br>The test will be successful if a web page indicating successful connection establishment (and display of the OQS algorithm combination configured as well as the client-supported key exchange mechanism) is received.</li>
</ol>

<p>Notes: </p>
<ol>
<li>The instructions above assume a local installation of <a href="https://www.docker.com/get-started">Docker</a>. </li>
<li><p>Another equally valid approach would be to build all required software from source and then execute it locally. Examples for this can be found in <a href="https://github.com/open-quantum-safe/oqs-demos">the OQS Github repository</a>.</p>
<p>In this way, you could for example verify correct operation of all components using openssl's <i>s_client</i> function by running <pre>echo "GET /" | openssl s_client -CAfile CA.crt --connect test.openquantumsafe.org:<i>port</i> --curves <i>kex</i></pre> Again, values for <i>port</i> and <i>kex</i> must be suitably set.</p></li>
<li>Using "openssl s_client" has the additional benefit that it also displays the actual algorithms utilized: <i>Server Temp Key</i> describes the key exchange algorithm and <i>Peer signature type</i> the signature algorithm actually used.</li> 
<li>The OQS docker hub containers also provide a ready-made QSC-openssl distribution facilitating this test: You can do this for example with this command: <pre>docker run -v `pwd`:/ca -it openquantumsafe/curl:LIBOQS_RELEASE openssl s_client --connect test.openquantumsafe.org:6000 -CAfile /ca/CA.crt </pre> Then issue the <tt>GET /</tt> command on the command line to retrieve an information page.</li>
<li>The OQS docker images are pre-loaded with the test CA certificate which allow simplified testing bypassing the need to first obtain the test CA certificate and mounting this into the docker image. Therefore, testing a specific algorithm can be done simply without any preparation by running <br><pre>docker run -it openquantumsafe/curl:LIBOQS_RELEASE curl --cacert /opt/oqssa/oqs-testca.pem https://test.openquantumsafe.org:<i>port</i> --curves <i>kex</i></pre></li>
</ol>

<h2> List of all supported QSC Signature / Key Exchange algorithms </h2>

<p>The list below provides links to the entry points of all OQS signature / key exchange algorithm combinations supported.</p>

<p>For automated testing, a JSON file encoding all available SIG/KEM combinations and the respective ports where they can be found is <a href="assignments.json">available for download here</a>. <i>We explicitly want to warn that algorithm/port combinations are subject to change. Be sure to download the most current JSON file before testing.</i></p>

<p>Note: The designator "*" below for key exchange algorithms should not be understood that the port referenced supports any possible KEM, but only all those KEMs configured into the underlying nginx server as default groups. This can be set when building the server via the <a href="https://github.com/open-quantum-safe/oqs-demos/blob/main/nginx/fulltest/Dockerfile#L25-L26">DEFAULT_GROUPS</a> configuration option. The default algorithm list is: <pre>x25519:x448:prime256v1:secp384r1:secp521r1:kyber512:x25519_kyber768:p256_kyber512:kyber768:p384_kyber768:kyber1024:p521_kyber1024.</pre></p>

<table>
  <tr>
    <th>Signature algorithm</th>
    <th>Key exchange algorithm</th>
    <th>Port</th>
    <th>Link</th>
  </tr>
