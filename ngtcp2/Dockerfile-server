# Define build arguments for version tags, installation paths, and configurations
ARG ALPINE_VERSION=3.21
ARG OPENSSLQUIC_TAG=openssl-3.1.7-quic1
ARG LIBOQS_TAG=0.12.0
ARG OQSPROVIDER_TAG=0.8.0
ARG NGHTTP3_TAG=v1.6.0
ARG NGTCP2_TAG=v1.5.0
ARG INSTALLDIR=/opt/oqssa

# Stage 1: Build - Compile and assemble all necessary components and dependencies
FROM alpine:${ALPINE_VERSION} AS intermediate
ARG OPENSSLQUIC_TAG
ARG LIBOQS_TAG
ARG OQSPROVIDER_TAG
ARG NGHTTP3_TAG
ARG NGTCP2_TAG
ARG INSTALLDIR

# Install required build tools and system dependencies
RUN apk update && apk --no-cache add bash git \
    pkgconfig autoconf automake libtool g++ \
    make cmake ninja libev-dev libevent-dev   \
    openssl-dev openssl linux-headers

# Download and prepare source files needed for the build process
WORKDIR /opt
RUN git clone --depth 1 --branch ${LIBOQS_TAG} https://github.com/open-quantum-safe/liboqs && \
    git clone --depth 1 --branch ${OPENSSLQUIC_TAG} https://github.com/quictls/openssl.git && \
    git clone --depth 1 --branch ${OQSPROVIDER_TAG} https://github.com/open-quantum-safe/oqs-provider.git && \
    git clone --depth 1 --branch ${NGHTTP3_TAG}  https://github.com/ngtcp2/nghttp3 && \
    git clone --depth 1 --branch ${NGTCP2_TAG} https://github.com/ngtcp2/ngtcp2

# Build and install liboqs
WORKDIR /opt/liboqs/build
RUN cmake -GNinja -DCMAKE_INSTALL_PREFIX=${INSTALLDIR} ..  \
    && ninja && ninja install


# Build and instal OpenSSL
WORKDIR /opt/openssl
RUN LDFLAGS="-Wl,-rpath -Wl,${INSTALLDIR}/lib64" ./config shared --prefix=${INSTALLDIR} && \
    make ${MAKE_DEFINES} && make install_sw install_ssldirs && \
    if [ -d ${INSTALLDIR}/lib64 ]; then ln -s ${INSTALLDIR}/lib64 ${INSTALLDIR}/lib; fi && \
    if [ -d ${INSTALLDIR}/lib ]; then ln -s ${INSTALLDIR}/lib ${INSTALLDIR}/lib64; fi

# Build, install, and configure the oqs-provider for OpenSSL integration
WORKDIR /opt/oqs-provider
RUN ln -s ../openssl . && \
    cmake -DOPENSSL_ROOT_DIR=${INSTALLDIR} -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=${INSTALLDIR} -S . -B _build && \
    cmake --build _build  && cp _build/lib/oqsprovider.so ${INSTALLDIR}/lib64/ossl-modules && \
    sed -i "s/default = default_sect/default = default_sect\noqsprovider = oqsprovider_sect/g" /opt/oqssa/ssl/openssl.cnf && \
    sed -i "s/\[default_sect\]/\[default_sect\]\nactivate = 1\n\[oqsprovider_sect\]\nactivate = 1\n/g" /opt/oqssa/ssl/openssl.cnf && \
    sed -i "s/providers = provider_sect/providers = provider_sect\nssl_conf = ssl_sect\n\n\[ssl_sect\]\nsystem_default = system_default_sect\n\n\[system_default_sect\]\nGroups = \$ENV\:\:KEM_ALG\n/g" /opt/oqssa/ssl/openssl.cnf && \
    sed -i "s/\# Use this in order to automatically load providers/\# Set default KEM alg if not set via environment variable\nKEM_ALG = kyber512\n\n# Use this in order to automatically load providers/g" /opt/oqssa/ssl/openssl.cnf

# Build and install nghttp3
WORKDIR /opt/nghttp3
RUN git submodule update --init && autoreconf -i && \
    ./configure --prefix=$PWD/build --enable-lib-only && \
    make -j$(nproc) check && make install

# Build and install ngtcp2
WORKDIR /opt/ngtcp2
RUN autoreconf -i && \
    ./configure PKG_CONFIG_PATH=$PWD/../nghttp3/build/lib/pkgconfig:/opt/oqssa/lib64/pkgconfig  \
    CXX=g++ CXXFLAGS="-std=c++20" && \
    make -j$(nproc) && make install

# Generate server key and self-signed certificate files
WORKDIR /
RUN echo "Generating server key and certificate"  && mkdir certs && cd certs && openssl req -newkey rsa:4096 -nodes -keyout server.key -x509 -days 365 -out server.crt -subj "/CN=localhost"

# Copy all required shared object dependencies to a single directory
RUN mkdir /opt/lib && cd /opt/lib && \
        cp /opt/ngtcp2/lib/.libs/libngtcp2.so.* . && \
        cp /usr/lib/libev.so.* . && \
        cp /opt/nghttp3/build/lib/libnghttp3.so.* . && \
        cp /opt/ngtcp2/crypto/quictls/.libs/libngtcp2_crypto_quictls.so.* . && \
        cp /opt/oqssa/lib64/libssl.so.* . && \
        cp /opt/oqssa/lib64/libcrypto.so.* . && \
        cp /usr/lib/libstdc++.so.* . && \
        cp /usr/lib/libgcc_s.so.* .

# Stage 2: Runtime - Create a lightweight image with essential binaries and configurations
FROM alpine:${ALPINE_VERSION} AS dev

# Install essential runtime tools and libraries
RUN apk update && apk --no-cache add mailcap

# Create a simple index page
RUN echo "This is my index page">index.html

# Copy required executables, certificates, libraries, and configuration files from the build stage
COPY --from=intermediate /opt/ngtcp2/examples/qtlsserver /usr/local/bin
COPY --from=intermediate /certs /certs
COPY --from=intermediate /opt/lib /usr/local/lib
COPY --from=intermediate /opt/oqssa/lib64/ossl-modules/oqsprovider.so /opt/oqssa/lib64/ossl-modules/oqsprovider.so
COPY --from=intermediate /opt/oqssa/ssl/openssl.cnf /opt/oqssa/ssl/openssl.cnf

# Create a symbolic link for the library path
RUN ln -s /opt/oqssa/lib64 /opt/oqssa/lib;

# Copy and run the startup script
COPY ./serverstart.sh .
CMD ["./serverstart.sh"]