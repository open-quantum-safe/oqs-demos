diff --git a/src/tools/reach/reach.cpp b/src/tools/reach/reach.cpp
index 178eeea5..054004c1 100644
--- a/src/tools/reach/reach.cpp
+++ b/src/tools/reach/reach.cpp
@@ -25,6 +25,7 @@ QUIC_ADDR ServerAddress = {0};
 std::vector<const char*> ALPNs({ "h3", "h3-29", "hq-interop", "hq-29", "smb" });
 const char* InputAlpn = nullptr;
 uint32_t InputVersion = 0;
+uint32_t ErrorExitOnUnreachability = 0;
 
 const QUIC_API_TABLE* MsQuic;
 HQUIC Registration;
@@ -32,6 +33,9 @@ HQUIC Registration;
 struct ConnectionContext {
     bool GotConnected;
     uint32_t QuicVersion;
+    uint32_t HandshakeInitialFlight;
+    uint32_t HandshakeFlight;
+    uint32_t HandshakeBytes;
     CXPLAT_EVENT Complete;
 };
 
@@ -49,6 +53,20 @@ ConnectionHandler(
     switch (Event->Type) {
     case QUIC_CONNECTION_EVENT_CONNECTED: {
         Context->GotConnected = true;
+        QUIC_STATISTICS value = {};
+        uint32_t valueSize = sizeof(value);
+        QUIC_STATUS Status =
+            MsQuic->GetParam(
+                Connection,
+               QUIC_PARAM_LEVEL_CONNECTION,
+                QUIC_PARAM_CONN_STATISTICS_PLAT,
+                &valueSize,
+                &value);
+        if (!QUIC_FAILED(Status)) {
+            Context->HandshakeInitialFlight = value.Timing.InitialFlightEnd - value.Timing.Start;
+            Context->HandshakeFlight = value.Timing.HandshakeFlightEnd - value.Timing.Start;
+           Context->HandshakeBytes = value.Handshake.ClientFlight1Bytes;
+        }
         MsQuic->ConnectionShutdown(Connection, QUIC_CONNECTION_SHUTDOWN_FLAG_NONE, 0);
         uint32_t Size = sizeof(Context->QuicVersion);
         MsQuic->GetParam(Connection, QUIC_PARAM_LEVEL_CONNECTION, QUIC_PARAM_CONN_QUIC_VERSION, &Size, &Context->QuicVersion);
@@ -91,7 +109,7 @@ CXPLAT_THREAD_CALLBACK(TestReachability, _Alpn)
 
     QUIC_CREDENTIAL_CONFIG CredConfig;
     CxPlatZeroMemory(&CredConfig, sizeof(CredConfig));
-    CredConfig.Flags = QUIC_CREDENTIAL_FLAG_CLIENT; // TODO - Disable certificate validation?
+    CredConfig.Flags = QUIC_CREDENTIAL_FLAG_CLIENT | QUIC_CREDENTIAL_FLAG_USE_TLS_BUILTIN_CERTIFICATE_VALIDATION; // rely on OpenSSL default cert validation
 
     if (QUIC_FAILED(MsQuic->ConfigurationLoadCredential(Configuration, &CredConfig))) {
         printf("ConfigurationOpen failed.\n");
@@ -123,8 +141,12 @@ CXPLAT_THREAD_CALLBACK(TestReachability, _Alpn)
 
     if (Context.GotConnected) {
         printf("  0x%08x %12s    reachable\n", Context.QuicVersion, (char*)_Alpn);
+        printf("QUIC_STATISTICS InitialFlight: %d\n", Context.HandshakeInitialFlight);
+        printf("QUIC_STATISTICS HandshakeFlight: %d\n", Context.HandshakeFlight);
+       printf("QUIC_STATISTICS Handshake Bytes: %d\n", Context.HandshakeBytes);
     } else {
         printf("             %12s  unreachable\n", (char*)_Alpn);
+       if (ErrorExitOnUnreachability) exit(ErrorExitOnUnreachability);
     }
 
     CXPLAT_THREAD_RETURN(0);
@@ -214,7 +236,7 @@ main(int argc, char **argv)
             !strcmp(argv[1], "/?") ||
             !strcmp(argv[1], "help")
         )) {
-        printf("Usage: quicreach.exe [-server:<name>] [-ip:<ip>] [-port:<number>] [-alpn:<alpn>] [-version:<quic_version>]\n");
+        printf("Usage: quicreach.exe [-server:<name>] [-ip:<ip>] [-port:<number>] [-alpn:<alpn>] [-version:<quic_version>] [-errorexitonunreachability:<exitvalue>]\n");
         exit(1);
     }
 
@@ -223,6 +245,7 @@ main(int argc, char **argv)
     TryGetValue(argc, argv, "port", &Port);
     TryGetValue(argc, argv, "alpn", &InputAlpn);
     TryGetValue(argc, argv, "version", &InputVersion);
+    TryGetValue(argc, argv, "errorexitonunreachability", &ErrorExitOnUnreachability);
 
     CxPlatSystemLoad();
     CxPlatInitialize();
@@ -302,6 +325,14 @@ main(int argc, char **argv)
         CxPlatThreadDelete(&Thread);
     }
 
+    uint64_t Counters[QUIC_PERF_COUNTER_MAX];
+    uint32_t BufferLength = sizeof(Counters);
+    MsQuic->GetParam( NULL, QUIC_PARAM_LEVEL_GLOBAL, QUIC_PARAM_GLOBAL_PERF_COUNTERS, &BufferLength, Counters);
+    printf("QUIC_PERF_COUNTER_UDP_RECV: %ld\n", Counters[QUIC_PERF_COUNTER_UDP_RECV]);
+    printf("QUIC_PERF_COUNTER_UDP_SEND: %ld\n", Counters[QUIC_PERF_COUNTER_UDP_SEND]);
+    printf("QUIC_PERF_COUNTER_UDP_RECV_BYTES: %ld\n", Counters[QUIC_PERF_COUNTER_UDP_RECV_BYTES]);
+    printf("QUIC_PERF_COUNTER_UDP_SEND_BYTES: %ld\n", Counters[QUIC_PERF_COUNTER_UDP_SEND_BYTES]);
+
     MsQuic->RegistrationClose(Registration);
 
     MsQuicClose(MsQuic);

