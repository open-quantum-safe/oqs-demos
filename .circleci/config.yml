version: 2.1

parameters:
  new_openssl_commit:
    type: boolean
    default: false

# CircleCI doesn't handle large file sets properly for local builds
# https://github.com/CircleCI-Public/circleci-cli/issues/281#issuecomment-472808051
localCheckout:
  &localCheckout
  run: |-
    git config --global --add safe.directory /tmp/_circleci_local_build_repo
    PROJECT_PATH=$(cd ${CIRCLE_WORKING_DIRECTORY}; pwd)
    mkdir -p ${PROJECT_PATH}
    cd /tmp/_circleci_local_build_repo
    git ls-files -z | xargs -0 -s 2090860 tar -c | tar -x -C ${PROJECT_PATH}
    cp -a /tmp/_circleci_local_build_repo/.git ${PROJECT_PATH}

jobs:
  ubuntu_x64_provider:
    description: Building and pushing oqsprovider demo Docker image
    docker:
      - image: openquantumsafe/ci-ubuntu-focal-x86_64:latest
        auth:
          username: $DOCKER_LOGIN
          password: $DOCKER_PASSWORD
    steps:
      - checkout # change this from "checkout" to "*localCheckout" when running CircleCI locally
      - setup_remote_docker
      - run:
          name: Authenticate to Docker
          command: echo $DOCKER_PASSWORD | docker login --username $DOCKER_LOGIN
            --password-stdin
      - run:
          name: Build Provider
          command: |
            docker build --build-arg MAKE_DEFINES="-j 18" -t oqs-ossl3-img . &&
            docker build --build-arg MAKE_DEFINES="-j 18" --build-arg OPENSSL_TAG=master --build-arg LIBOQS_TAG=main --build-arg OQSPROVIDER_TAG=main -t oqs-ossl3-img-main .
          working_directory: openssl3
      - run:
          name: Spot-test Provider -- One baseline and one hybrid QSC alg
          command: |
            docker run --rm --name oqs-ossl3 oqs-ossl3-img sh -c "openssl list -providers; /opt/openssl32/bin/serverstart.sh; sleep 2; echo 'GET /' | openssl s_client -connect localhost --groups kyber768 --CAfile /opt/openssl32/bin/CA.crt" &&
            docker run --rm --name oqs-ossl3 oqs-ossl3-img sh -c "KEM_ALG=p521_frodo1344aes /opt/openssl32/bin/serverstart.sh; sleep 2; echo 'GET /' | openssl s_client -connect localhost --groups p521_frodo1344aes --CAfile /opt/openssl32/bin/CA.crt"
      - run:
          name: Spot-test Provider -- One baseline and one hybrid QSC alg (main/master)
          command: |
            docker run --rm --name oqs-ossl3-main oqs-ossl3-img-main sh -c "openssl list -providers; /opt/openssl32/bin/serverstart.sh; sleep 2; echo 'GET /' | openssl s_client -connect localhost --groups kyber768 --CAfile /opt/openssl32/bin/CA.crt" &&
            docker run --rm --name oqs-ossl3-main oqs-ossl3-img-main sh -c "KEM_ALG=p521_frodo1344aes /opt/openssl32/bin/serverstart.sh; sleep 2; echo 'GET /' | openssl s_client -connect localhost --groups p521_frodo1344aes --CAfile /opt/openssl32/bin/CA.crt"
      - when:
          condition:
            or:
              - equal: [ main, << pipeline.git.branch >> ]
              - equal: [ true, << pipeline.parameters.new_openssl_commit >> ]
          steps:
            - run:
                name: Push oqsprovider image
                command: |
                  docker tag oqs-ossl3-img $TARGETNAME/oqs-ossl3:latest &&
                  docker push $TARGETNAME/oqs-ossl3:latest 
    # The resource_class feature allows configuring CPU and RAM resources for each job. Different resource classes are available for different executors. https://circleci.com/docs/2.0/configuration-reference/#resourceclass
    resource_class: large

  ubuntu_x64_nginx:
    description: Building and pushing OQS-nginx and OQS-curl generic demo Docker image
    docker:
      - image: openquantumsafe/ci-ubuntu-focal-x86_64:latest
        auth:
          username: $DOCKER_LOGIN
          password: $DOCKER_PASSWORD
    steps:
      - checkout # change this from "checkout" to "*localCheckout" when running CircleCI locally
      - setup_remote_docker
      - run:
          name: Authenticate to Docker
          command: echo $DOCKER_PASSWORD | docker login --username $DOCKER_LOGIN
            --password-stdin
      - run:
          name: Build OQS nginx
          command: |
            docker build --build-arg MAKE_DEFINES="-j 18" -t oqs-nginx-img . &&
            docker build --build-arg MAKE_DEFINES="-j 18" --build-arg OPENSSL_TAG=master --build-arg LIBOQS_TAG=main --build-arg OQSPROVIDER_TAG=main -t oqs-nginx-img-main . 
          working_directory: nginx
      - run:
          name: Build curl with generic liboqs
          command: |
            docker build --build-arg MAKE_DEFINES="-j 18" --build-arg LIBOQS_BUILD_DEFINES="-DOQS_OPT_TARGET=generic" -t oqs-curl-generic . &&
            docker build --build-arg MAKE_DEFINES="-j 18" --build-arg LIBOQS_BUILD_DEFINES="-DOQS_OPT_TARGET=generic" --build-arg OPENSSL_TAG=master --build-arg LIBOQS_TAG=main --build-arg OQSPROVIDER_TAG=main -t oqs-curl-generic-main . 
          working_directory: curl
      - run:
          name: Test Curl with generic liboqs
          command: |
            docker run -e TEST_TIME=5 -e KEM_ALG=kyber768 -e SIG_ALG=dilithium3 -it oqs-curl-generic perftest.sh
      - run:
          name: Test Curl with generic liboqs (main/master)
          command: |
            docker run -e TEST_TIME=5 -e KEM_ALG=kyber768 -e SIG_ALG=dilithium3 -it oqs-curl-generic-main perftest.sh 
      - run:
          name: Test nginx and curl generic
          command: |
            docker network create nginx-test &&
            docker run --network nginx-test --detach --rm --name oqs-nginx oqs-nginx-img &&
            sleep 2 &&
            docker run --network nginx-test oqs-curl-generic curl -k https://oqs-nginx:4433
      - run:
          name: Test nginx and curl generic (main/master)
          command: |
            docker network create nginx-test-main &&
            docker run --network nginx-test-main --detach --rm --name oqs-nginx-main oqs-nginx-img-main &&
            sleep 2 &&
            docker run --network nginx-test-main oqs-curl-generic-main curl -k https://oqs-nginx-main:4433
      - when:
          condition:
            or:
              - equal: [ main, << pipeline.git.branch >> ]
              - equal: [ true, << pipeline.parameters.new_openssl_commit >> ]
          steps:
            - run:
                name: Push nginx and curl generic image
                command: |
                  docker tag oqs-curl-generic $TARGETNAME/curl:latest &&
                  docker push $TARGETNAME/curl:latest &&
                  docker tag oqs-nginx-img $TARGETNAME/nginx:latest &&
                  docker push $TARGETNAME/nginx:latest 

# Not actively maintained:
  ubuntu_x64_openlitespeed:
    description: Building and pushing OQS-openlitespeed demo Docker images
    docker:
      - image: openquantumsafe/ci-ubuntu-focal-x86_64:latest
        auth:
          username: $DOCKER_LOGIN
          password: $DOCKER_PASSWORD
    steps:
      - checkout # change this from "checkout" to "*localCheckout" when running CircleCI locally
      - setup_remote_docker
      - run:
          name: Authenticate to Docker
          command: echo $DOCKER_PASSWORD | docker login --username $DOCKER_LOGIN
            --password-stdin
      - run:
          name: Build openlitespeed with liboqs
          command: |
            docker build -f Dockerfile-server -t oqs-openlitespeed .
          working_directory: openlitespeed
      - run:
          name: Test oqs-openlitespeed using public oqs-msquic
          command: |
            docker network create oqsls-test &&
            docker run --network oqsls-test --detach --rm --name lsws oqs-openlitespeed bash -c "/root/serverstart.sh && /usr/local/lsws/bin/lswsctrl start && sleep 100" &&
            sleep 20 &&
            docker run --rm --network oqsls-test -it openquantumsafe/msquic-reach bash -c "wget http://lsws/CA.crt && SSL_CERT_FILE=CA.crt TLS_DEFAULT_GROUPS=p521_kyber1024 quicreach lsws --port 443 --stats"
      - when:
          condition:
            or:
              - equal: [ main, << pipeline.git.branch >> ]
              - equal: [ true, << pipeline.parameters.new_openssl_commit >> ]
          steps:
            - run:
                name: Push openlitespeed image
                command: |
                  docker tag oqs-openlitespeed $TARGETNAME/openlitespeed:latest &&
                  docker push $TARGETNAME/openlitespeed:latest

# Not actively maintained:
  ubuntu_x64_quic:
    description: Building and pushing OQS-QUIC-nginx and OQS-msquic demo Docker images
    docker:
      - image: openquantumsafe/ci-ubuntu-focal-x86_64:latest
        auth:
          username: $DOCKER_LOGIN
          password: $DOCKER_PASSWORD
    steps:
      - checkout # change this from "checkout" to "*localCheckout" when running CircleCI locally
      - setup_remote_docker
      - run:
          name: Authenticate to Docker
          command: echo $DOCKER_PASSWORD | docker login --username $DOCKER_LOGIN
            --password-stdin
      - run:
          name: Build OQS QUIC nginx
          command: |
            docker build --build-arg MAKE_DEFINES="-j 18" -f Dockerfile-server -t oqs-quic-nginx-img .
          working_directory: quic
      - run:
          name: Build msquic with liboqs
          command: |
            docker build --build-arg MAKE_DEFINES="-j 18" -f Dockerfile-client -t oqs-msquic .
          working_directory: quic
      - run:
          name: Test oqs-msquic against baseline QUIC test server
          command: |
            docker run -it oqs-msquic bash -c "quicreach quic.nginx.org"
      - run:
          name: Test oqs-nginx-quic and oqs-msquic
          command: |
            docker network create quic-test &&
            docker run --network quic-test --detach --rm --name nginx oqs-quic-nginx-img &&
            sleep 100 &&
            docker run --network quic-test -it oqs-msquic bash -c "cd /root && wget nginx:5999/CA.crt && TLS_DEFAULT_GROUPS=frodo640aes SSL_CERT_FILE=/root/CA.crt quicreach nginx --port 6001"
      - when:
          condition:
            or:
              - equal: [ main, << pipeline.git.branch >> ]
              - equal: [ true, << pipeline.parameters.new_openssl_commit >> ]
          steps:
            - run:
                name: Push nginx-quic and msquic images
                command: |
                  docker tag oqs-msquic $TARGETNAME/msquic-reach:latest &&
                  docker push $TARGETNAME/msquic-reach:latest &&
                  docker tag oqs-quic-nginx-img $TARGETNAME/nginx-quic:latest &&
                  docker push $TARGETNAME/nginx-quic:latest 

  ubuntu_x64_httpd:
    description: Building and pushing OQS-httpd and OQS-curl dev demo Docker image
    docker:
      - image: openquantumsafe/ci-ubuntu-focal-x86_64:latest
        auth:
          username: $DOCKER_LOGIN
          password: $DOCKER_PASSWORD
    steps:
      - checkout # change this from "checkout" to "*localCheckout" when running CircleCI locally
      - setup_remote_docker
      - run:
          name: Authenticate to Docker
          command: echo $DOCKER_PASSWORD | docker login --username $DOCKER_LOGIN
            --password-stdin
      - run:
          name: Build Apache httpd
          command: |
            docker build --build-arg MAKE_DEFINES="-j 18" -t oqs-httpd-img . &&
            docker build --build-arg MAKE_DEFINES="-j 18" --build-arg OPENSSL_TAG=master --build-arg LIBOQS_TAG=main --build-arg OQSPROVIDER_TAG=main -t oqs-httpd-img-main .
          working_directory: httpd
      - run:
          name: Build Curl (dev)
          command: |
            # The CircleCI executor offers 35 cores, but using
            # all of them might exhaust memory
            docker build --build-arg MAKE_DEFINES="-j 18" -t oqs-curl . &&
            docker build --build-arg MAKE_DEFINES="-j 18" --target dev -t oqs-curl-dev . &&
            docker build --build-arg MAKE_DEFINES="-j 18" --build-arg OPENSSL_TAG=master --build-arg LIBOQS_TAG=main --build-arg OQSPROVIDER_TAG=main -t oqs-curl-main . &&
          working_directory: curl
      - run:
          name: Test Curl (dev)
          command: |
            docker run -e TEST_TIME=5 -e KEM_ALG=kyber768 -e SIG_ALG=dilithium3 -it oqs-curl perftest.sh
      - run:
          name: Test Curl (dev) (main/master)
          command: |
            docker run -e TEST_TIME=5 -e KEM_ALG=kyber768 -e SIG_ALG=dilithium3 -it oqs-curl-main perftest.sh
      - run:
          name: Test httpd using curl (dev)
          command: |
            docker network create httpd-test &&
            docker run --network httpd-test --detach --rm --name oqs-httpd oqs-httpd-img &&
            sleep 2 &&
            docker run --network httpd-test oqs-curl curl -k https://oqs-httpd:4433 --curves kyber768
      - run:
          name: Test httpd using curl (dev) (main/master)
          command: |
            docker network create httpd-test-main &&
            docker run --network httpd-test-main --detach --rm --name oqs-httpd-main oqs-httpd-img-main &&
            sleep 2 &&
            docker run --network httpd-test-main oqs-curl-main curl -k https://oqs-httpd:4433 --curves kyber768
      - when:
          condition:
            or:
              - equal: [ main, << pipeline.git.branch >> ]
              - equal: [ true, << pipeline.parameters.new_openssl_commit >> ]
          steps:
            - run:
                name: Push httpd and curl dev images
                command: |
                  docker tag oqs-curl $TARGETNAME/curl:optimized &&
                  docker push $TARGETNAME/curl:optimized &&
                  docker tag oqs-curl-dev $TARGETNAME/curl-dev &&
                  docker push $TARGETNAME/curl-dev &&
                  docker tag oqs-httpd-img $TARGETNAME/httpd:latest &&
                  docker push $TARGETNAME/httpd:latest 

# Not actively maintained:
  ubuntu_x64_haproxy:
    description: Building OQS-based HAproxy docker image
    docker:
      - image: openquantumsafe/ci-ubuntu-focal-x86_64:latest
        auth:
          username: $DOCKER_LOGIN
          password: $DOCKER_PASSWORD
    steps:
      - checkout # change this from "checkout" to "*localCheckout" when running CircleCI locally
      - setup_remote_docker
      - run:
          name: Authenticate to Docker
          command: echo $DOCKER_PASSWORD | docker login --username $DOCKER_LOGIN
            --password-stdin
      - run:
          name: Build HAproxy
          command: |
            docker build --build-arg MAKE_DEFINES="-j 18" -t oqs-haproxy-img . 
          working_directory: haproxy
      - run:
          name: Test HAproxy using public OQS curl
          command: |
            docker network create haproxy-test &&
            docker run --network haproxy-test --detach --rm --name oqs-haproxy oqs-haproxy-img &&
            sleep 4 &&
            docker run --network haproxy-test openquantumsafe/curl curl -k https://oqs-haproxy:4433
      - when:
          condition:
            or:
              - equal: [ main, << pipeline.git.branch >> ]
              - equal: [ true, << pipeline.parameters.new_openssl_commit >> ]
          steps:
            - run:
                name: Push OQS HAproxy image
                command: |
                  docker tag oqs-haproxy-img $TARGETNAME/haproxy:latest &&
                  docker push $TARGETNAME/haproxy:latest 

  ubuntu_x64_openvpn:
    description: Building OQS-based OpenVPN docker image
    docker:
      - image: openquantumsafe/ci-ubuntu-focal-x86_64:latest
        auth:
          username: $DOCKER_LOGIN
          password: $DOCKER_PASSWORD
    steps:
      - checkout # change this from "checkout" to "*localCheckout" when running CircleCI locally
      - setup_remote_docker:
          version: 20.10.2
      - run:
          name: Authenticate to Docker
          command: echo $DOCKER_PASSWORD | docker login --username $DOCKER_LOGIN
            --password-stdin
      - run:
          name: Build OpenVPN (main/master)
          command: |
            docker build --build-arg MAKE_DEFINES="-j 18" --build-arg OPENSSL_TAG=master --build-arg LIBOQS_TAG=main --build-arg OQSPROVIDER_TAG=main --build-arg OPENVPN_TAG=master -t oqs-openvpn . 
          working_directory: openvpn
      - run:
          name: Test OpenVPN using local docker network (main/master)
          command: |
            ./test.sh dilithium5 p521_kyber1024
          working_directory: openvpn
      - run:
          name: Build OpenVPN
          command: |
            docker build --build-arg MAKE_DEFINES="-j 18" -t oqs-openvpn .
          working_directory: openvpn
      - run:
          name: Test OpenVPN using local docker network
          command: |
            ./test.sh dilithium5 p521_kyber1024
          working_directory: openvpn
      - when:
          condition:
            or:
              - equal: [ main, << pipeline.git.branch >> ]
              - equal: [ true, << pipeline.parameters.new_openssl_commit >> ]
          steps:
            - run:
                name: Push OQS OpenVPN image
                command: |
                  docker tag oqs-openvpn $TARGETNAME/openvpn:latest &&
                  docker push $TARGETNAME/openvpn:latest 

# Not actively maintained:
  ubuntu_x64_mosquitto:
    description: Building OQS-based Mosquitto docker image
    docker:
      - image: openquantumsafe/ci-ubuntu-focal-x86_64:latest
        auth:
          username: $DOCKER_LOGIN
          password: $DOCKER_PASSWORD
    steps:
      - checkout # change this from "checkout" to "*localCheckout" when running CircleCI locally
      - setup_remote_docker
      - run:
          name: Authenticate to Docker
          command: echo $DOCKER_PASSWORD | docker login --username $DOCKER_LOGIN
            --password-stdin
      - run:
          name: Build Mosquitto
          command: |
            docker build -t oqs-mosquitto . 
          working_directory: mosquitto
      - run:
          name: Test Mosquitto using local docker network
          command: |
            docker network create --subnet=192.168.0.0/16 mosquitto-test &&
            docker run --network mosquitto-test --ip 192.168.0.2 -it --rm --name oqs-mosquitto-broker -e "BROKER_IP=192.168.0.2" -e "EXAMPLE=broker-start.sh" -d oqs-mosquitto &&
            docker run --network mosquitto-test --ip 192.168.0.3 -it --rm --name oqs-mosquitto-subscriber -e "BROKER_IP=192.168.0.2" -e "SUB_IP=192.168.0.3" -e "EXAMPLE=subscriber-start.sh" -d oqs-mosquitto &&
            docker run --network mosquitto-test --ip 192.168.0.4 -it --rm --name oqs-mosquitto-publisher -e "BROKER_IP=192.168.0.2" -e "PUB_IP=192.168.0.4" -e "EXAMPLE=publisher-start.sh" -d oqs-mosquitto &&
            sleep 2 &&
            docker logs oqs-mosquitto-publisher | grep "Client_pub sending PUBLISH" &&
            docker logs oqs-mosquitto-subscriber | grep "Hello world"
          working_directory: mosquitto
      - when:
          condition:
            or:
              - equal: [ main, << pipeline.git.branch >> ]
              - equal: [ true, << pipeline.parameters.new_openssl_commit >> ]
          steps:
            - run:
                name: Push OQS Mosquitto image
                command: |
                  docker tag oqs-mosquitto $TARGETNAME/mosquitto:latest &&
                  docker push $TARGETNAME/mosquitto:latest 

# Not actively maintained:
  ubuntu_x64_wireshark:
    description: Building OQS-based wireshark docker image
    docker:
      - image: openquantumsafe/ci-ubuntu-focal-x86_64:latest
        auth:
          username: $DOCKER_LOGIN
          password: $DOCKER_PASSWORD
    steps:
      - checkout # change this from "checkout" to "*localCheckout" when running CircleCI locally
      - setup_remote_docker
      - run:
          name: Authenticate to Docker
          command: echo $DOCKER_PASSWORD | docker login --username $DOCKER_LOGIN
            --password-stdin
      - run:
          name: Build wireshark image
          command: |
            docker build -t $TARGETNAME/wireshark .
          working_directory: wireshark
      - when:
          condition:
            or:
              - equal: [ main, << pipeline.git.branch >> ]
              - equal: [ true, << pipeline.parameters.new_openssl_commit >> ]
          steps:
            - run:
                name: Push wireshark image
                command: |
                  docker push $TARGETNAME/wireshark

  ubuntu_x64_ngtcp2:
    description: Building OQS-based ngtcp2 docker image
    docker:
      - image: openquantumsafe/ci-ubuntu-focal-x86_64:latest
        auth:
          username: $DOCKER_LOGIN
          password: $DOCKER_PASSWORD
    steps:
      - checkout # change this from "checkout" to "*localCheckout" when running CircleCI locally
      - setup_remote_docker
      - run:
          name: Authenticate to Docker
          command: echo $DOCKER_PASSWORD | docker login --username $DOCKER_LOGIN
            --password-stdin
      - run:
          name: Build ngtcp2 server and client
          command: |
            docker build -t oqs-ngtcp2-server -f Dockerfile-server . &&
            docker build -t oqs-ngtcp2-client -f Dockerfile-client . 
          working_directory: ngtcp2
      - run:
          name: Build ngtcp2 server and client (main/master)
          command: |
            docker build --build-arg LIBOQS_TAG=main --build-arg OQSPROVIDER_TAG=main --build-arg NGHTTP3_TAG=main --build-arg NGTCP2_TAG=main -t oqs-ngtcp2-server-main -f Dockerfile-server . &&
            docker build --build-arg LIBOQS_TAG=main --build-arg OQSPROVIDER_TAG=main --build-arg NGHTTP3_TAG=main --build-arg NGTCP2_TAG=main -t oqs-ngtcp2-client-main -f Dockerfile-client . 
          working_directory: ngtcp2
      - run:
          name: Test ngtcp2 using local docker network
          command: |
            docker network create ngtcp2-test
            docker run --network ngtcp2-test --name oqs-ngtcp2server oqs-ngtcp2-server &
            docker run --network ngtcp2-test -it --name oqs-ngtcp2client oqs-ngtcp2-client sh -c 'qtlsclient --exit-on-first-stream-close --groups kyber512 oqs-ngtcp2server 6000'
            docker logs oqs-ngtcp2client | grep "QUIC handshake has been confirmed"
            docker rm oqs-ngtcp2client
            docker stop oqs-ngtcp2server
            docker rm oqs-ngtcp2server
            docker network rm ngtcp2-test
          working_directory: ngtcp2
      - run:
          name: Test ngtcp2 using local docker network (main/master)
          command: |
            docker network create ngtcp2-test-main
            docker run --network ngtcp2-test-main --name oqs-ngtcp2server-main oqs-ngtcp2-server-main &
            docker run --network ngtcp2-test-main -it --name oqs-ngtcp2client-main oqs-ngtcp2-client-main sh -c 'qtlsclient --exit-on-first-stream-close --groups kyber512 oqs-ngtcp2server-main 6000'
            docker logs oqs-ngtcp2client | grep "QUIC handshake has been confirmed"
            docker rm oqs-ngtcp2client-main
            docker stop oqs-ngtcp2server-main
            docker rm oqs-ngtcp2server-main
            docker network rm ngtcp2-test-main
          working_directory: ngtcp2
      - when:
          condition:
            or:
              - equal: [ main, << pipeline.git.branch >> ]
              - equal: [ true, << pipeline.parameters.new_openssl_commit >> ]
          steps:
            - run:
                name: Push OQS ngtcp2 image
                command: |
                  docker tag oqs-ngtcp2-server $TARGETNAME/ngtcp2-server:latest &&
                  docker tag oqs-ngtcp2-client $TARGETNAME/ngtcp2-client:latest &&
                  docker push $TARGETNAME/ngtcp2-server:latest &&
                  docker push $TARGETNAME/ngtcp2-client:latest

  ubuntu_x64_openssh:
    description: A template for building and pushing OQS demo Docker images on
      Ubuntu that do not use OQS-OpenSSL, but rather liboqs in another form
      (e.g. OQS-OpenSSH)
    docker:
      - image: openquantumsafe/ci-ubuntu-focal-x86_64:latest
        auth:
          username: $DOCKER_LOGIN
          password: $DOCKER_PASSWORD
    steps:
      - checkout # change this from "checkout" to "*localCheckout" when running CircleCI locally
      - setup_remote_docker
      - run:
          name: Authenticate to Docker
          command: echo $DOCKER_PASSWORD | docker login --username $DOCKER_LOGIN
            --password-stdin
      - run:
          name: Test OpenSSH
          command: |
            docker build --build-arg MAKE_DEFINES="-j 18" -t oqs-openssh-img . &&
            docker run --rm --name oqs-openssh oqs-openssh-img connect-test.sh
          working_directory: openssh
      - run:
          name: Test OpenSSH (main/master)
          command: |
            docker build --build-arg LIBOQS_RELEASE=main --build-arg MAKE_DEFINES="-j 18" -t oqs-openssh-img-main . &&
            docker run --rm --name oqs-openssh-main oqs-openssh-img-main connect-test.sh
          working_directory: openssh
      - when:
          condition:
            equal: [ main, << pipeline.git.branch >> ]
          steps:
            - run:
                name: Push openssh image
                command: |
                  docker tag oqs-openssh-img $TARGETNAME/openssh:latest &&
                  docker push $TARGETNAME/openssh:latest

# Not actively maintained:
  ubuntu_x64_envoy:
    description: Building and pushing OQS-enabled envoy
    docker:
      - image: openquantumsafe/ci-ubuntu-focal-x86_64:latest
        auth:
          username: $DOCKER_LOGIN
          password: $DOCKER_PASSWORD
    steps:
      - checkout # change this from "checkout" to "*localCheckout" when running CircleCI locally
      - setup_remote_docker
      - run:
          name: Install curl and Docker Compose
          environment:
            COMPOSE_VERSION: '1.29.2'
          command: |
            apt-get update && apt-get install curl
            curl -L "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o ~/docker-compose
            chmod +x ~/docker-compose
            mv ~/docker-compose /usr/local/bin/docker-compose
      - run:
          name: Authenticate to Docker
          command: echo $DOCKER_PASSWORD | docker login --username $DOCKER_LOGIN
            --password-stdin
      - run:
          name: Build OQS envoy
          no_output_timeout: "1h"
          command: |
            docker build -t envoy-oqs . 
          working_directory: envoy
      - run:
          name: Test OQS envoy TLS servers using built OQS envoy
          command: |
            docker create -v /data --name certsvolume openquantumsafe/ci-ubuntu-focal-x86_64:latest &&
            docker cp $(pwd)/certs/gen_cert.sh certsvolume:/data &&
            docker run -it --user root --volumes-from certsvolume -w /data --name keygen openquantumsafe/curl sh -c "/data/gen_cert.sh" && 
            docker cp keygen:/data/. $(pwd)/certs &&
            docker-compose pull &&
            docker-compose up --build -d &&
            docker-compose ps &&
            sleep 10 &&
            docker run --network host -it openquantumsafe/curl curl -v -k https://localhost:10000 -e SIG_ALG=dilithium3
          working_directory: envoy/tls
      - when:
          condition:
            or:
              - equal: [ main, << pipeline.git.branch >> ]
              - equal: [ true, << pipeline.parameters.new_openssl_commit >> ]
          steps:
            - run:
                name: Push envoy image
                command: |
                  docker tag envoy-oqs $TARGETNAME/envoy:latest &&
                  docker push $TARGETNAME/envoy:latest 

  ubuntu_x64_h2load:
    description: Building and pushing OQS-h2load demo Docker images
    docker:
      - image: openquantumsafe/ci-ubuntu-focal-x86_64:latest
        auth:
          username: $DOCKER_LOGIN
          password: $DOCKER_PASSWORD
    steps:
      - checkout # change this from "checkout" to "*localCheckout" when running CircleCI locally
      - setup_remote_docker
      - run:
          name: Authenticate to Docker
          command: echo $DOCKER_PASSWORD | docker login --username $DOCKER_LOGIN
            --password-stdin
      - run:
          name: Build h2load with liboqs
          command: |
            docker build -t oqs-h2load .
          working_directory: h2load
      - run:
          name: Build h2load with liboqs (main/master)
          command: |
            docker build --build-arg OPENSSL_TAG=master --build-arg LIBOQS_TAG=main --build-arg OQSPROVIDER_TAG=main --build-arg NGHTTP2_TAG=master -t oqs-h2load-main .
          working_directory: h2load
      - run:
          name: Test oqs-h2load using public oqs-nginx
          command: |
            docker network create h2load-test &&
            docker run --network h2load-test --detach --rm --name oqs-nginx openquantumsafe/nginx &&
            docker run --network h2load-test oqs-h2load sh -c "h2load -n 100 -c 10 https://oqs-nginx:4433 --groups kyber512"
      - run:
          name: Test oqs-h2load using public oqs-nginx (main/master)
          command: |
            docker network create h2load-test-main &&
            docker run --network h2load-test-main --detach --rm --name oqs-nginx-main openquantumsafe/nginx &&
            docker run --network h2load-test-main oqs-h2load-main sh -c "h2load -n 100 -c 10 https://oqs-nginx-main:4433 --groups kyber512"
      - when:
          condition:
            or:
              - equal: [ main, << pipeline.git.branch >> ]
              - equal: [ true, << pipeline.parameters.new_openssl_commit >> ]
          steps:
            - run:
                name: Push h2load image
                command: |
                  docker tag oqs-h2load $TARGETNAME/h2load:latest &&
                  docker push $TARGETNAME/h2load:latest

workflows:
  version: 2.1
  build:
    jobs:
      - ubuntu_x64_provider:
          context: openquantumsafe
      - ubuntu_x64_nginx:
          context: openquantumsafe
      #- ubuntu_x64_quic:
      #    context: openquantumsafe
      - ubuntu_x64_httpd:
          context: openquantumsafe
      #- ubuntu_x64_haproxy:
      #    context: openquantumsafe
      - ubuntu_x64_openvpn:
         context: openquantumsafe
      #- ubuntu_x64_mosquitto:
      #    context: openquantumsafe
      - ubuntu_x64_ngtcp2:
         context: openquantumsafe
      - ubuntu_x64_openssh:
         context: openquantumsafe
      # Disabled in CI as failing to conclude test properly as per
      # https://github.com/open-quantum-safe/oqs-demos/pull/167#issuecomment-1383673300
      # - ubuntu_x64_openlitespeed:
      #     context: openquantumsafe
      #- ubuntu_x64_wireshark:
      #    context: openquantumsafe
      # Disable as it takes too long on OQS CCI plan
      #- ubuntu_x64_envoy:
      #    context: openquantumsafe
      - ubuntu_x64_h2load:
         context: openquantumsafe
